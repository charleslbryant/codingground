using System.IO;
using System;

class Program
{
    static void Main()
    {
        Console.WriteLine("Problem 1: " + Problem1());
        Console.WriteLine("Problem 2: " + Problem2());
    }
    
    public static string Problem1()
    {
        //If we list all the natural numbers below 10 that are multiples of 3 or 
        //5, we get 3, 5, 6 and 9. 
        //The sum of these multiples is 23.
        //Find the sum of all the multiples of 3 or 5 below 1000.
        int[] multiples = new int[]{3,5};
        int lowerBounds = 3;
        int upperBounds = 1000;
        int result = 0;
        
        for (int i = lowerBounds; i < upperBounds; i++)
        {
            if (IsMultipleOf(multiples, i))
            {
                result += i;
            }
        }
        
        return result.ToString();
    }
    
    public static string Problem2()
    {
        //Each new term in the Fibonacci sequence is generated by adding the 
        //previous two terms. By starting with 1 and 2, the first 10 terms will 
        //be:
        //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        //By considering the terms in the Fibonacci sequence whose values do not 
        //exceed four million, find the sum of the even-valued terms.
        
        int previousSequence = 1;
        int currentSequence = 2;
        int upperBounds = 4000000;
        int result = 0;
        
        int nextSequence = 0;
        while (nextSequence <= upperBounds) 
        {
            nextSequence = previousSequence + currentSequence;
            previousSequence = currentSequence;
            if (currentSequence % 2 == 0)
            {
                result += currentSequence;
            }
            currentSequence = nextSequence;
        }
        
        return result.ToString();
    }
    
    public static bool IsMultipleOf(int[] multiples, int value)
    {
        foreach (var multiple in multiples)
        {
            if (value % multiple == 0)
            {
                return true;
            }
        }
        
        return false;
    }
}
